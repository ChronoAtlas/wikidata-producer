#!/usr/bin/env python3

import sys
from typing import Optional

import sqlite3

def get_latest_migration_version(conn) -> int:
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS migrations (version INTEGER PRIMARY KEY)")
    cursor.execute("SELECT MAX(version) FROM migrations")
    latest_version = cursor.fetchone()[0]
    return latest_version if latest_version is not None else 0

def apply_migration(conn, version, script) -> None:
    cursor = conn.cursor()
    cursor.executescript(script)
    cursor.execute("INSERT INTO migrations (version) VALUES (?)", (version,))
    conn.commit()
    print(f"Applied migration {version}")

def find_next_migration(latest_version, migrations_directory) -> tuple[Optional[int], Optional[str]]:
    """
    Find the next migration script based on the latest applied version.
    """
    from os import listdir
    from os.path import isfile, join

    migration_files = sorted(f for f in listdir(migrations_directory) if isfile(join(migrations_directory, f)))
    for filename in migration_files:
        if filename.endswith(".down.sql"):
            continue
        version = int(filename.split("_")[0])
        if version > latest_version:
            sql_file_path = join(migrations_directory, filename)
            with open(sql_file_path, "r") as file:
                script = file.read()
                print(f"Gathered migration from {sql_file_path}")
            return version, script
    return None, None

def main(migrations_directory, db_file) -> bool:
    conn = sqlite3.connect(db_file)
    latest_version = get_latest_migration_version(conn)
    
    version, script = find_next_migration(latest_version, migrations_directory)
    if script:
        apply_migration(conn, version, script)
        conn.close()
        return False
    else:
        print("Database is already up to date.")
        conn.close()
        return True

# Exit codes:
#   0 -> Db is not up to date
#   1 -> Db is up to date
if __name__ == "__main__":
    if len(sys.argv) < 3:
        print(f"Usage: {sys.argv[0]} <migrations_dir> <db_file>")
        sys.exit(0)

    print(f"Applying migrations from {sys.argv[1]} to database {sys.argv[2]}")
    db_is_up_to_date = main(sys.argv[1], sys.argv[2])
    if db_is_up_to_date:
        sys.exit(1)
    else:
        sys.exit(0)
